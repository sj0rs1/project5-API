name: CI/CD with DockerHub

on:
  push:
    branches:
      - develop
      - test
      - acceptance
      - main

jobs:
  build-and-test:
    name: Build, Test and Lint
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: groenevingers_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring, pdo, sqlite
        
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-

      - name: Copy .env file for the environment
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            cp .env.development .env
          elif [ "${{ github.ref }}" == "refs/heads/test" ]; then
            cp .env.testing .env
          elif [ "${{ github.ref }}" == "refs/heads/acceptance" ]; then
            cp .env.acceptance .env
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            cp .env.production .env
          fi

      - name: Set DB_CONNECTION environment  # Corrected indentation
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Using MySQL for main branch"
            echo "DB_CONNECTION=mysql" >> .env
            echo "DB_HOST=db" >> .env
            echo "DB_PORT=3306" >> .env
            echo "DB_DATABASE=groenevingers_db" >> .env
          else
            echo "Using SQLite for non-main branches"
            echo "DB_CONNECTION=sqlite" >> .env
            echo "DB_DATABASE=/tmp/test_database.sqlite" >> .env
          fi


      - name: Check if .env file exists
        run: ls -la

      - name: Output .env file contents
        run: cat .env

      - name: Generate Application Key
        run: php artisan key:generate --verbose

      - name: Set Directory Permissions
        run: sudo chmod -R 777 storage bootstrap/cache

      - name: Run Composer
        run: |
          composer install --no-interaction

      - name: Run PHP_CodeSniffer
        run: |
          vendor/bin/phpcs --exclude=Generic.Files.LineLength --standard=PSR12 app/

      - name: Create SQLite database file
        if: github.ref != 'refs/heads/main'
        run: |
          touch /tmp/test_database.sqlite

      - name: Migrate and seed database
        if: github.ref != 'refs/heads/main'
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: /tmp/test_database.sqlite
        run: |
          php artisan migrate:fresh --seed --verbose

      - name: Run tests
        if: github.ref != 'refs/heads/main'
        run: |
          php artisan test

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-test

    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Package Application
        run: |
          mkdir -p release
          zip -r release/app.zip *

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_id }}"
          release_name: "Release ${{ github.run_id }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/app.zip
          asset_name: app.zip
          asset_content_type: application/zip

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            TAG=develop
          elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            TAG=testing
          elif [[ "${{ github.ref }}" == "refs/heads/acceptance" ]]; then
            TAG=acceptance
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG=latest
          fi
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/groenevingers_api:${TAG}
      - name: Push Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/groenevingers_api:${TAG}
